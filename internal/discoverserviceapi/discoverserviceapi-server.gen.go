// Package discoverserviceapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package discoverserviceapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	externalRef0 "oransc.org/nonrtric/sme/internal/common29122"
	externalRef1 "oransc.org/nonrtric/sme/internal/common29571"
	externalRef2 "oransc.org/nonrtric/sme/internal/publishserviceapi"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /allServiceAPIs)
	GetAllServiceAPIs(ctx echo.Context, params GetAllServiceAPIsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAllServiceAPIs converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllServiceAPIs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllServiceAPIsParams
	// ------------- Required query parameter "api-invoker-id" -------------

	err = runtime.BindQueryParameter("form", true, true, "api-invoker-id", ctx.QueryParams(), &params.ApiInvokerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter api-invoker-id: %s", err))
	}

	// ------------- Optional query parameter "api-name" -------------

	err = runtime.BindQueryParameter("form", true, false, "api-name", ctx.QueryParams(), &params.ApiName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter api-name: %s", err))
	}

	// ------------- Optional query parameter "api-version" -------------

	err = runtime.BindQueryParameter("form", true, false, "api-version", ctx.QueryParams(), &params.ApiVersion)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter api-version: %s", err))
	}

	// ------------- Optional query parameter "comm-type" -------------

	err = runtime.BindQueryParameter("form", true, false, "comm-type", ctx.QueryParams(), &params.CommType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter comm-type: %s", err))
	}

	// ------------- Optional query parameter "protocol" -------------

	err = runtime.BindQueryParameter("form", true, false, "protocol", ctx.QueryParams(), &params.Protocol)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter protocol: %s", err))
	}

	// ------------- Optional query parameter "aef-id" -------------

	err = runtime.BindQueryParameter("form", true, false, "aef-id", ctx.QueryParams(), &params.AefId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter aef-id: %s", err))
	}

	// ------------- Optional query parameter "data-format" -------------

	err = runtime.BindQueryParameter("form", true, false, "data-format", ctx.QueryParams(), &params.DataFormat)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter data-format: %s", err))
	}

	// ------------- Optional query parameter "api-cat" -------------

	err = runtime.BindQueryParameter("form", true, false, "api-cat", ctx.QueryParams(), &params.ApiCat)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter api-cat: %s", err))
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", ctx.QueryParams(), &params.SupportedFeatures)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter supported-features: %s", err))
	}

	// ------------- Optional query parameter "api-supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "api-supported-features", ctx.QueryParams(), &params.ApiSupportedFeatures)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter api-supported-features: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAllServiceAPIs(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/allServiceAPIs", wrapper.GetAllServiceAPIs)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xX23IaPRJ+lS7tXiRVMAPjU8wda+MUe+GwhuzNJuUSmoZRopEmkgaHdfFA+xr7ZH+1",
	"NByMsf9ySP03Bovur78+qvXIhCkro1F7x3qPzIkCSx6+XksnzAIt5v3RMJzk6ISVlZdGsx67w8qiI0Xg",
	"oKTzYGZAoiBqa1F7tQSLc+k8YYDU4AuEq/5oeAPCWIRZrQVhAdc5OO6lmy2lngMHXZdTtIQ3k8qjBWGl",
	"Rys5VNYsZI45TJcBrj8agjDa1SXahLVYZU2F1kuM3qBdSIH90fB6S/2AKzu/klECblSDAe6gqqdKumJr",
	"uPk9gQEXxRPpHWhwBVcKpBaqzhH6gxtyYCYVOii5FwW5S2h7bpIn0mMZqP7d4oz12GScXWZZdh8CeD+K",
	"fO7H0fB9fzRMlrxUf0u3+UybZKbjQ2FgqxYrpR5GM90W88sKWY9xa/mSrVabAzP9hsKzFR3hT49Wc3Vt",
	"xIEwnnwcjWAyhuwyybIM/t29SE6SDlyZsjQ6xObG8hIfjP0OM2MhyN8a64upqXUeioe1WG0V67HC+6qX",
	"pg8PD8nJvKoSY+fpzFfpuELhUm5FIReYZpf3Dq1El0ajKbkl9cw8Z0f2yWre1DXFfidvLvmi//8/yDpZ",
	"txWZfbJzruV/OelzBSNuvUbr4F3/bviPFvQnw3ELrq7G/RYMJuNhCybj6/Ax6dOfq/fJF91XCqycF94B",
	"NYtdYJ580azFvPSKohvTue613XyyFlugdZF8N8mSTpurquBJRj6aCjWvJEU96SQdKn3ui5CUlCu1TXk4",
	"mqM/UPWN0Z3i3o1HaEuL3kpcIHAQRikU6x6JEkIYm4ciNiDQei71oVqmngxhHOasxz6i7z9lSOSpMjxa",
	"x3r/2Sc69iFZMkftZZwR696XemG+owXunJzrbXseGDMJDD1w5QzY7eQKslc3a2yJ9smgap+n5whSe7Qz",
	"LjD0JTH6UaNdshbTvAw9U8l2w6Qtc9ZiFn/U0mLOet7W2GrGKqWgaSoXXKI2O1SmBNsC6UE6cOhpAD3y",
	"St7yEldQcevXU+rz3RCct7XwtUUSy3EmdZy2rp4KxWuHcJqcksJOe551uq/5Er6+mXXJvxkLTc1u6L3D",
	"ZJ7Aovv+NYPrQn+TTZortZYiVBaQONTu6dUQjd8N/vV5MJ7c3w3Go0+348GLVIQpy3awu0vk+AH8hOmE",
	"8A+4M7LGG2HUvhMvka0a+d/MdU3jYJYHm06J1+3BfOIsNsEbUnnNPafhXHLvXkgijXmumnEMa+fhn+NP",
	"t0HjxaTm3PN2xP7NoSLWNxH4gE+TvS1CcI9zY5c0Kx8KKYpne8YUldFzB9681itiz48/De4NchoPDlxd",
	"Vcb6bXRvbzbLU7gat5NzczeMt/xeIrWBbc8aSy/F+eyiex+3AQrdKwvLGnFN/W1u5ZvN9Ul4pc6pBaPc",
	"eszB5uZJYFJI2suWYLRawhShuSZAzrbywfmtFo3oRuy1pP01MfpKN4+rjHZx/806HfoQRnvUYQPgVaWa",
	"OZR+cxTHx+c0Dhf70+dAWAefF/zaPExNvqTiopUgXrMWXa38dr+mFQ5CjdH/6wfEzoshLGW065x0LvaC",
	"1KWGfSVImyikpBsgPhwB8YEgTmMwfwmCdANE9wiIboQ4OQLiJEKcHgFxGiHOj4A4DxDdI1h0I4vs8tch",
	"skuCODsiqWcxqWdHZOQsZiTHGa+V/2WYtf5qFdoyvDOaTTo+pmh7vDPGr9JmILZ5JV266NIjg1vJpypO",
	"jEYuPhYaUuEp5nppij95WSlMhCnZfvM3ii/uoBfJ2d4OmmVZQoy/rv4IAAD//37ZMOyFEAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "TS29122_CommonData.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef2.PathToRawSpec(path.Join(pathPrefix, "TS29222_CAPIF_Publish_Service_API.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(pathPrefix, "TS29571_CommonData.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
