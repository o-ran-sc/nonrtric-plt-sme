// Package securityapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package securityapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	externalRef0 "oransc.org/nonrtric/capifcore/internal/common29122"
	externalRef1 "oransc.org/nonrtric/capifcore/internal/common29571"
	externalRef2 "oransc.org/nonrtric/capifcore/internal/publishserviceapi"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /securities/{securityId}/token)
	PostSecuritiesSecurityIdToken(ctx echo.Context, securityId string) error

	// (DELETE /trustedInvokers/{apiInvokerId})
	DeleteTrustedInvokersApiInvokerId(ctx echo.Context, apiInvokerId string) error

	// (GET /trustedInvokers/{apiInvokerId})
	GetTrustedInvokersApiInvokerId(ctx echo.Context, apiInvokerId string, params GetTrustedInvokersApiInvokerIdParams) error

	// (PUT /trustedInvokers/{apiInvokerId})
	PutTrustedInvokersApiInvokerId(ctx echo.Context, apiInvokerId string) error

	// (POST /trustedInvokers/{apiInvokerId}/delete)
	PostTrustedInvokersApiInvokerIdDelete(ctx echo.Context, apiInvokerId string) error

	// (POST /trustedInvokers/{apiInvokerId}/update)
	PostTrustedInvokersApiInvokerIdUpdate(ctx echo.Context, apiInvokerId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostSecuritiesSecurityIdToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostSecuritiesSecurityIdToken(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "securityId" -------------
	var securityId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "securityId", runtime.ParamLocationPath, ctx.Param("securityId"), &securityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter securityId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSecuritiesSecurityIdToken(ctx, securityId)
	return err
}

// DeleteTrustedInvokersApiInvokerId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTrustedInvokersApiInvokerId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "apiInvokerId" -------------
	var apiInvokerId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiInvokerId", runtime.ParamLocationPath, ctx.Param("apiInvokerId"), &apiInvokerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter apiInvokerId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTrustedInvokersApiInvokerId(ctx, apiInvokerId)
	return err
}

// GetTrustedInvokersApiInvokerId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTrustedInvokersApiInvokerId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "apiInvokerId" -------------
	var apiInvokerId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiInvokerId", runtime.ParamLocationPath, ctx.Param("apiInvokerId"), &apiInvokerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter apiInvokerId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTrustedInvokersApiInvokerIdParams
	// ------------- Optional query parameter "authenticationInfo" -------------

	err = runtime.BindQueryParameter("form", true, false, "authenticationInfo", ctx.QueryParams(), &params.AuthenticationInfo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter authenticationInfo: %s", err))
	}

	// ------------- Optional query parameter "authorizationInfo" -------------

	err = runtime.BindQueryParameter("form", true, false, "authorizationInfo", ctx.QueryParams(), &params.AuthorizationInfo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter authorizationInfo: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTrustedInvokersApiInvokerId(ctx, apiInvokerId, params)
	return err
}

// PutTrustedInvokersApiInvokerId converts echo context to params.
func (w *ServerInterfaceWrapper) PutTrustedInvokersApiInvokerId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "apiInvokerId" -------------
	var apiInvokerId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiInvokerId", runtime.ParamLocationPath, ctx.Param("apiInvokerId"), &apiInvokerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter apiInvokerId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTrustedInvokersApiInvokerId(ctx, apiInvokerId)
	return err
}

// PostTrustedInvokersApiInvokerIdDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostTrustedInvokersApiInvokerIdDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "apiInvokerId" -------------
	var apiInvokerId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiInvokerId", runtime.ParamLocationPath, ctx.Param("apiInvokerId"), &apiInvokerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter apiInvokerId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTrustedInvokersApiInvokerIdDelete(ctx, apiInvokerId)
	return err
}

// PostTrustedInvokersApiInvokerIdUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) PostTrustedInvokersApiInvokerIdUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "apiInvokerId" -------------
	var apiInvokerId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "apiInvokerId", runtime.ParamLocationPath, ctx.Param("apiInvokerId"), &apiInvokerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter apiInvokerId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTrustedInvokersApiInvokerIdUpdate(ctx, apiInvokerId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/securities/:securityId/token", wrapper.PostSecuritiesSecurityIdToken)
	router.DELETE(baseURL+"/trustedInvokers/:apiInvokerId", wrapper.DeleteTrustedInvokersApiInvokerId)
	router.GET(baseURL+"/trustedInvokers/:apiInvokerId", wrapper.GetTrustedInvokersApiInvokerId)
	router.PUT(baseURL+"/trustedInvokers/:apiInvokerId", wrapper.PutTrustedInvokersApiInvokerId)
	router.POST(baseURL+"/trustedInvokers/:apiInvokerId/delete", wrapper.PostTrustedInvokersApiInvokerIdDelete)
	router.POST(baseURL+"/trustedInvokers/:apiInvokerId/update", wrapper.PostTrustedInvokersApiInvokerIdUpdate)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//lvbC0IA4AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "TS29122_CommonData.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef2.PathToRawSpec(path.Join(pathPrefix, "TS29222_CAPIF_Publish_Service_API.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(pathPrefix, "TS29571_CommonData.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
