// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	keycloak "oransc.org/nonrtric/capifcore/internal/keycloak"
)

// AccessManagement is an autogenerated mock type for the AccessManagement type
type AccessManagement struct {
	mock.Mock
}

// GetToken provides a mock function with given fields: clientId, clientPassword, scope, realm
func (_m *AccessManagement) GetToken(clientId string, clientPassword string, scope string, realm string) (keycloak.Jwttoken, error) {
	ret := _m.Called(clientId, clientPassword, scope, realm)

	var r0 keycloak.Jwttoken
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) (keycloak.Jwttoken, error)); ok {
		return rf(clientId, clientPassword, scope, realm)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string) keycloak.Jwttoken); ok {
		r0 = rf(clientId, clientPassword, scope, realm)
	} else {
		r0 = ret.Get(0).(keycloak.Jwttoken)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(clientId, clientPassword, scope, realm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAccessManagement interface {
	mock.TestingT
	Cleanup(func())
}

// NewAccessManagement creates a new instance of AccessManagement. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAccessManagement(t mockConstructorTestingTNewAccessManagement) *AccessManagement {
	mock := &AccessManagement{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
