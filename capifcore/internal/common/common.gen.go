// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "oransc.org/nonrtric/capifcore/internal/common29571"
)

// Defines values for AfResultStatus.
const (
	AfResultStatusOTHER AfResultStatus = "OTHER"

	AfResultStatusRELOCNOALLOWED AfResultStatus = "RELOC_NO_ALLOWED"

	AfResultStatusSUCCESS AfResultStatus = "SUCCESS"

	AfResultStatusTEMPORARYCONGESTION AfResultStatus = "TEMPORARY_CONGESTION"
)

// Defines values for FlowDirection.
const (
	FlowDirectionBIDIRECTIONAL FlowDirection = "BIDIRECTIONAL"

	FlowDirectionDOWNLINK FlowDirection = "DOWNLINK"

	FlowDirectionUNSPECIFIED FlowDirection = "UNSPECIFIED"

	FlowDirectionUPLINK FlowDirection = "UPLINK"
)

// Defines values for MediaType.
const (
	MediaTypeAPPLICATION MediaType = "APPLICATION"

	MediaTypeAUDIO MediaType = "AUDIO"

	MediaTypeCONTROL MediaType = "CONTROL"

	MediaTypeDATA MediaType = "DATA"

	MediaTypeMESSAGE MediaType = "MESSAGE"

	MediaTypeOTHER MediaType = "OTHER"

	MediaTypeTEXT MediaType = "TEXT"

	MediaTypeVIDEO MediaType = "VIDEO"
)

// Defines values for NotificationMethod.
const (
	NotificationMethodONETIME NotificationMethod = "ONE_TIME"

	NotificationMethodONEVENTDETECTION NotificationMethod = "ON_EVENT_DETECTION"

	NotificationMethodPERIODIC NotificationMethod = "PERIODIC"
)

// Defines values for ReservPriority.
const (
	ReservPriorityPRIO1 ReservPriority = "PRIO_1"

	ReservPriorityPRIO10 ReservPriority = "PRIO_10"

	ReservPriorityPRIO11 ReservPriority = "PRIO_11"

	ReservPriorityPRIO12 ReservPriority = "PRIO_12"

	ReservPriorityPRIO13 ReservPriority = "PRIO_13"

	ReservPriorityPRIO14 ReservPriority = "PRIO_14"

	ReservPriorityPRIO15 ReservPriority = "PRIO_15"

	ReservPriorityPRIO16 ReservPriority = "PRIO_16"

	ReservPriorityPRIO2 ReservPriority = "PRIO_2"

	ReservPriorityPRIO3 ReservPriority = "PRIO_3"

	ReservPriorityPRIO4 ReservPriority = "PRIO_4"

	ReservPriorityPRIO5 ReservPriority = "PRIO_5"

	ReservPriorityPRIO6 ReservPriority = "PRIO_6"

	ReservPriorityPRIO7 ReservPriority = "PRIO_7"

	ReservPriorityPRIO8 ReservPriority = "PRIO_8"

	ReservPriorityPRIO9 ReservPriority = "PRIO_9"
)

// Defines values for SupportedGADShapes.
const (
	SupportedGADShapesELLIPSOIDARC SupportedGADShapes = "ELLIPSOID_ARC"

	SupportedGADShapesLOCAL2DPOINTUNCERTAINTYELLIPSE SupportedGADShapes = "LOCAL_2D_POINT_UNCERTAINTY_ELLIPSE"

	SupportedGADShapesLOCAL3DPOINTUNCERTAINTYELLIPSOID SupportedGADShapes = "LOCAL_3D_POINT_UNCERTAINTY_ELLIPSOID"

	SupportedGADShapesPOINT SupportedGADShapes = "POINT"

	SupportedGADShapesPOINTALTITUDE SupportedGADShapes = "POINT_ALTITUDE"

	SupportedGADShapesPOINTALTITUDEUNCERTAINTY SupportedGADShapes = "POINT_ALTITUDE_UNCERTAINTY"

	SupportedGADShapesPOINTUNCERTAINTYCIRCLE SupportedGADShapes = "POINT_UNCERTAINTY_CIRCLE"

	SupportedGADShapesPOINTUNCERTAINTYELLIPSE SupportedGADShapes = "POINT_UNCERTAINTY_ELLIPSE"

	SupportedGADShapesPOLYGON SupportedGADShapes = "POLYGON"
)

// IP address and/or FQDN.
type AddrFqdn struct {
	// Indicates an FQDN.
	Fqdn *string `json:"fqdn,omitempty"`

	// Contains an IP adresse.
	IpAddr *externalRef0.IpAddr `json:"ipAddr,omitempty"`
}

// Contains an AF application identifier.
type AfAppId string

// Identifies the result of application layer handling.
type AfResultInfo struct {
	// Possible values are:
	// - SUCCESS: The application layer is ready or the relocation is completed.
	// - TEMPORARY_CONGESTION: The application relocation fails due to temporary congestion.
	// - RELOC_NO_ALLOWED: The application relocation fails because application relocation is not allowed.
	// - OTHER: The application relocation fails due to other reason.
	AfStatus AfResultStatus `json:"afStatus"`

	// Contains EAS IP replacement information.
	EasIpReplaceInfos *[]externalRef0.EasIpReplacementInfo `json:"easIpReplaceInfos,omitempty"`

	// At least one of the "routeInfo" attribute and the "routeProfId" attribute shall be included in the "RouteToLocation" data type.
	TrafficRoute *externalRef0.RouteToLocation `json:"trafficRoute"`

	// If present and set to "true" it indicates that buffering of uplink traffic to the target DNAI is needed.
	UpBuffInd *bool `json:"upBuffInd,omitempty"`
}

// Possible values are:
// - SUCCESS: The application layer is ready or the relocation is completed.
// - TEMPORARY_CONGESTION: The application relocation fails due to temporary congestion.
// - RELOC_NO_ALLOWED: The application relocation fails because application relocation is not allowed.
// - OTHER: The application relocation fails due to other reason.
type AfResultStatus string

// Indicates value of altitude.
type Altitude float64

// Indicates value of angle.
type Angle int

// Indicates a Civic address.
type CivicAddress struct {
	A1         *string `json:"A1,omitempty"`
	A2         *string `json:"A2,omitempty"`
	A3         *string `json:"A3,omitempty"`
	A4         *string `json:"A4,omitempty"`
	A5         *string `json:"A5,omitempty"`
	A6         *string `json:"A6,omitempty"`
	ADDCODE    *string `json:"ADDCODE,omitempty"`
	BLD        *string `json:"BLD,omitempty"`
	FLR        *string `json:"FLR,omitempty"`
	HNO        *string `json:"HNO,omitempty"`
	HNS        *string `json:"HNS,omitempty"`
	LMK        *string `json:"LMK,omitempty"`
	LOC        *string `json:"LOC,omitempty"`
	NAM        *string `json:"NAM,omitempty"`
	PC         *string `json:"PC,omitempty"`
	PCN        *string `json:"PCN,omitempty"`
	PLC        *string `json:"PLC,omitempty"`
	POBOX      *string `json:"POBOX,omitempty"`
	POD        *string `json:"POD,omitempty"`
	POM        *string `json:"POM,omitempty"`
	PRD        *string `json:"PRD,omitempty"`
	PRM        *string `json:"PRM,omitempty"`
	RD         *string `json:"RD,omitempty"`
	RDBR       *string `json:"RDBR,omitempty"`
	RDSEC      *string `json:"RDSEC,omitempty"`
	RDSUBBR    *string `json:"RDSUBBR,omitempty"`
	ROOM       *string `json:"ROOM,omitempty"`
	SEAT       *string `json:"SEAT,omitempty"`
	STS        *string `json:"STS,omitempty"`
	UNIT       *string `json:"UNIT,omitempty"`
	Country    *string `json:"country,omitempty"`
	Method     *string `json:"method,omitempty"`
	ProvidedBy *string `json:"providedBy,omitempty"`
	UsageRules *string `json:"usageRules,omitempty"`
}

// Contains codec related information.
type CodecData string

// Describes a communication failure detected by AMF
type CommunicationFailure struct {
	NasReleaseCode *string `json:"nasReleaseCode,omitempty"`

	// Represents the NGAP cause.
	RanReleaseCode *externalRef0.NgApCause `json:"ranReleaseCode,omitempty"`
}

// Indicates value of confidence.
type Confidence int

// Represents the content version of some content.
type ContentVersion int

// EllipsoidArc defines model for EllipsoidArc.
type EllipsoidArc struct {
	// Embedded struct due to allOf(#/components/schemas/GADShape)
	GADShape `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Indicates value of confidence.
	Confidence Confidence `json:"confidence"`

	// Indicates value of angle.
	IncludedAngle Angle `json:"includedAngle"`

	// Indicates value of the inner radius.
	InnerRadius InnerRadius `json:"innerRadius"`

	// Indicates value of angle.
	OffsetAngle Angle `json:"offsetAngle"`

	// Geographical coordinates.
	Point GeographicalCoordinates `json:"point"`

	// Indicates value of uncertainty.
	UncertaintyRadius Uncertainty `json:"uncertaintyRadius"`
}

// Identifies an Ethernet flow.
type EthFlowDescription struct {
	// String identifying a MAC address formatted in the hexadecimal notation according to clause 1.1 and clause 2.1 of RFC 7042.
	DestMacAddr *externalRef0.MacAddr48 `json:"destMacAddr,omitempty"`

	// String identifying a MAC address formatted in the hexadecimal notation according to clause 1.1 and clause 2.1 of RFC 7042.
	DestMacAddrEnd *externalRef0.MacAddr48 `json:"destMacAddrEnd,omitempty"`
	EthType        string                  `json:"ethType"`

	// Defines a packet filter of an IP flow.
	FDesc *FlowDescription `json:"fDesc,omitempty"`

	// Possible values are
	// - DOWNLINK: The corresponding filter applies for traffic to the UE.
	// - UPLINK: The corresponding filter applies for traffic from the UE.
	// - BIDIRECTIONAL: The corresponding filter applies for traffic both to and from the UE.
	// - UNSPECIFIED: The corresponding filter applies for traffic to the UE (downlink), but has no specific direction declared. The service data flow detection shall apply the filter for uplink traffic as if the filter was bidirectional. The PCF shall not use the value UNSPECIFIED in filters created by the network in NW-initiated procedures. The PCF shall only include the value UNSPECIFIED in filters in UE-initiated procedures if the same value is received from the SMF.
	FDir *FlowDirection `json:"fDir,omitempty"`

	// String identifying a MAC address formatted in the hexadecimal notation according to clause 1.1 and clause 2.1 of RFC 7042.
	SourceMacAddr *externalRef0.MacAddr48 `json:"sourceMacAddr,omitempty"`

	// String identifying a MAC address formatted in the hexadecimal notation according to clause 1.1 and clause 2.1 of RFC 7042.
	SrcMacAddrEnd *externalRef0.MacAddr48 `json:"srcMacAddrEnd,omitempty"`
	VlanTags      *[]string               `json:"vlanTags,omitempty"`
}

// Defines a packet filter of an IP flow.
type FlowDescription string

// Possible values are
// - DOWNLINK: The corresponding filter applies for traffic to the UE.
// - UPLINK: The corresponding filter applies for traffic from the UE.
// - BIDIRECTIONAL: The corresponding filter applies for traffic both to and from the UE.
// - UNSPECIFIED: The corresponding filter applies for traffic to the UE (downlink), but has no specific direction declared. The service data flow detection shall apply the filter for uplink traffic as if the filter was bidirectional. The PCF shall not use the value UNSPECIFIED in filters created by the network in NW-initiated procedures. The PCF shall only include the value UNSPECIFIED in filters in UE-initiated procedures if the same value is received from the SMF.
type FlowDirection string

// Common base type for GAD shapes.
type GADShape struct {
	// Indicates supported GAD shapes.
	Shape SupportedGADShapes `json:"shape"`
}

// Geographic area specified by different shape.
type GeographicArea interface{}

// Geographical coordinates.
type GeographicalCoordinates struct {
	Lat float64 `json:"lat"`
	Lon float64 `json:"lon"`
}

// Indicates value of the inner radius.
type InnerRadius int32

// Range of IPv4 addresses
type Ipv4AddressRange struct {
	// String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166.
	End *externalRef0.Ipv4Addr `json:"end,omitempty"`

	// String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166.
	Start *externalRef0.Ipv4Addr `json:"start,omitempty"`
}

// Local2dPointUncertaintyEllipse defines model for Local2dPointUncertaintyEllipse.
type Local2dPointUncertaintyEllipse struct {
	// Embedded struct due to allOf(#/components/schemas/GADShape)
	GADShape `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Indicates value of confidence.
	Confidence Confidence `json:"confidence"`

	// Indicates a Local origin in a reference system
	LocalOrigin LocalOrigin `json:"localOrigin"`

	// Relative Cartesian Location
	Point RelativeCartesianLocation `json:"point"`

	// Ellipse with uncertainty.
	UncertaintyEllipse UncertaintyEllipse `json:"uncertaintyEllipse"`
}

// Local3dPointUncertaintyEllipsoid defines model for Local3dPointUncertaintyEllipsoid.
type Local3dPointUncertaintyEllipsoid struct {
	// Embedded struct due to allOf(#/components/schemas/GADShape)
	GADShape `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Indicates value of confidence.
	Confidence Confidence `json:"confidence"`

	// Indicates a Local origin in a reference system
	LocalOrigin LocalOrigin `json:"localOrigin"`

	// Relative Cartesian Location
	Point RelativeCartesianLocation `json:"point"`

	// Ellipsoid with uncertainty
	UncertaintyEllipsoid UncertaintyEllipsoid `json:"uncertaintyEllipsoid"`
}

// Indicates a Local origin in a reference system
type LocalOrigin struct {
	CoordinateId *string `json:"coordinateId,omitempty"`

	// Geographical coordinates.
	Point *GeographicalCoordinates `json:"point,omitempty"`
}

// Indicates the media type of a media component.
type MediaType string

// Describes a network area information in which the NF service consumer requests the number of UEs.
type NetworkAreaInfo struct {
	// Contains a list of E-UTRA cell identities.
	Ecgis *[]externalRef0.Ecgi `json:"ecgis,omitempty"`

	// Contains a list of NG RAN nodes.
	GRanNodeIds *[]externalRef0.GlobalRanNodeId `json:"gRanNodeIds,omitempty"`

	// Contains a list of NR cell identities.
	Ncgis *[]externalRef0.Ncgi `json:"ncgis,omitempty"`

	// Contains a list of tracking area identities.
	Tais *[]externalRef0.Tai `json:"tais,omitempty"`
}

// Possible values are:
// - PERIODIC
// - ONE_TIME
// - ON_EVENT_DETECTION
type NotificationMethod string

// Indicates value of orientation angle.
type Orientation int

// Point defines model for Point.
type Point struct {
	// Embedded struct due to allOf(#/components/schemas/GADShape)
	GADShape `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Geographical coordinates.
	Point GeographicalCoordinates `json:"point"`
}

// PointAltitude defines model for PointAltitude.
type PointAltitude struct {
	// Embedded struct due to allOf(#/components/schemas/GADShape)
	GADShape `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Indicates value of altitude.
	Altitude Altitude `json:"altitude"`

	// Geographical coordinates.
	Point GeographicalCoordinates `json:"point"`
}

// PointAltitudeUncertainty defines model for PointAltitudeUncertainty.
type PointAltitudeUncertainty struct {
	// Embedded struct due to allOf(#/components/schemas/GADShape)
	GADShape `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Indicates value of altitude.
	Altitude Altitude `json:"altitude"`

	// Indicates value of confidence.
	Confidence Confidence `json:"confidence"`

	// Geographical coordinates.
	Point GeographicalCoordinates `json:"point"`

	// Indicates value of uncertainty.
	UncertaintyAltitude Uncertainty `json:"uncertaintyAltitude"`

	// Ellipse with uncertainty.
	UncertaintyEllipse UncertaintyEllipse `json:"uncertaintyEllipse"`
}

// List of points.
type PointList []GeographicalCoordinates

// PointUncertaintyCircle defines model for PointUncertaintyCircle.
type PointUncertaintyCircle struct {
	// Embedded struct due to allOf(#/components/schemas/GADShape)
	GADShape `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Geographical coordinates.
	Point GeographicalCoordinates `json:"point"`

	// Indicates value of uncertainty.
	Uncertainty Uncertainty `json:"uncertainty"`
}

// PointUncertaintyEllipse defines model for PointUncertaintyEllipse.
type PointUncertaintyEllipse struct {
	// Embedded struct due to allOf(#/components/schemas/GADShape)
	GADShape `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Indicates value of confidence.
	Confidence Confidence `json:"confidence"`

	// Geographical coordinates.
	Point GeographicalCoordinates `json:"point"`

	// Ellipse with uncertainty.
	UncertaintyEllipse UncertaintyEllipse `json:"uncertaintyEllipse"`
}

// Polygon defines model for Polygon.
type Polygon struct {
	// Embedded struct due to allOf(#/components/schemas/GADShape)
	GADShape `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// List of points.
	PointList PointList `json:"pointList"`
}

// Relative Cartesian Location
type RelativeCartesianLocation struct {
	// string with format 'float' as defined in OpenAPI.
	X externalRef0.Float `json:"x"`

	// string with format 'float' as defined in OpenAPI.
	Z *externalRef0.Float `json:"z,omitempty"`
}

// Represents the type of reporting that the subscription requires.
type ReportingInformation struct {
	// indicating a time in seconds.
	GrpRepTime *externalRef0.DurationSec `json:"grpRepTime,omitempty"`
	ImmRep     *bool                     `json:"immRep,omitempty"`

	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
	MaxReportNbr *externalRef0.Uinteger `json:"maxReportNbr,omitempty"`

	// string with format 'date-time' as defined in OpenAPI.
	MonDur *externalRef0.DateTime `json:"monDur,omitempty"`

	// Possible values are:
	// - ACTIVATE: The event notification is activated.
	// - DEACTIVATE: The event notification is deactivated and shall be muted. The available
	//    event(s) shall be stored.
	// - RETRIEVAL: The event notification shall be sent to the NF service consumer(s),
	//   after that, is muted again.
	NotifFlag *externalRef0.NotificationFlag `json:"notifFlag,omitempty"`

	// Possible values are:
	// - PERIODIC
	// - ONE_TIME
	// - ON_EVENT_DETECTION
	NotifMethod *NotificationMethod `json:"notifMethod,omitempty"`

	// Criteria for partitioning the UEs before applying the sampling ratio.
	PartitionCriteria *[]externalRef0.PartitioningCriteria `json:"partitionCriteria,omitempty"`

	// indicating a time in seconds.
	RepPeriod *externalRef0.DurationSec `json:"repPeriod,omitempty"`

	// Unsigned integer indicating Sampling Ratio (see clauses 4.15.1 of 3GPP TS 23.502), expressed in percent.
	SampRatio *externalRef0.SamplingRatio `json:"sampRatio,omitempty"`
}

// Indicates the reservation priority.
type ReservPriority string

// Indicates supported GAD shapes.
type SupportedGADShapes string

// Indicates TSC Traffic pattern.
type TscaiInputContainer struct {
	// string with format 'date-time' as defined in OpenAPI.
	BurstArrivalTime *externalRef0.DateTime `json:"burstArrivalTime,omitempty"`

	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
	Periodicity *externalRef0.Uinteger `json:"periodicity,omitempty"`

	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
	SurTimeInNumMsg *externalRef0.Uinteger `json:"surTimeInNumMsg,omitempty"`

	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
	SurTimeInTime *externalRef0.Uinteger `json:"surTimeInTime,omitempty"`
}

// Indicates value of uncertainty.
type Uncertainty float32

// Ellipse with uncertainty.
type UncertaintyEllipse struct {
	// Indicates value of orientation angle.
	OrientationMajor Orientation `json:"orientationMajor"`

	// Indicates value of uncertainty.
	SemiMajor Uncertainty `json:"semiMajor"`

	// Indicates value of uncertainty.
	SemiMinor Uncertainty `json:"semiMinor"`
}

// Ellipsoid with uncertainty
type UncertaintyEllipsoid struct {
	// Indicates value of orientation angle.
	OrientationMajor Orientation `json:"orientationMajor"`

	// Indicates value of uncertainty.
	SemiMajor Uncertainty `json:"semiMajor"`

	// Indicates value of uncertainty.
	SemiMinor Uncertainty `json:"semiMinor"`

	// Indicates value of uncertainty.
	Vertical Uncertainty `json:"vertical"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "TS29571_CommonData.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
