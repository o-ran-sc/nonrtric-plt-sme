// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ServiceRegister is an autogenerated mock type for the ServiceRegister type
type ServiceRegister struct {
	mock.Mock
}

// GetAefsForPublisher provides a mock function with given fields: apfId
func (_m *ServiceRegister) GetAefsForPublisher(apfId string) []string {
	ret := _m.Called(apfId)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(apfId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// IsFunctionRegistered provides a mock function with given fields: functionId
func (_m *ServiceRegister) IsFunctionRegistered(functionId string) bool {
	ret := _m.Called(functionId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(functionId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

type mockConstructorTestingTNewServiceRegister interface {
	mock.TestingT
	Cleanup(func())
}

// NewServiceRegister creates a new instance of ServiceRegister. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewServiceRegister(t mockConstructorTestingTNewServiceRegister) *ServiceRegister {
	mock := &ServiceRegister{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
