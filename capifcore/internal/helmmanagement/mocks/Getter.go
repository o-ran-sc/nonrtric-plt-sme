// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	bytes "bytes"

	getter "helm.sh/helm/v3/pkg/getter"

	mock "github.com/stretchr/testify/mock"
)

// Getter is an autogenerated mock type for the Getter type
type Getter struct {
	mock.Mock
}

// Get provides a mock function with given fields: url, options
func (_m *Getter) Get(url string, options ...getter.Option) (*bytes.Buffer, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, url)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *bytes.Buffer
	if rf, ok := ret.Get(0).(func(string, ...getter.Option) *bytes.Buffer); ok {
		r0 = rf(url, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bytes.Buffer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...getter.Option) error); ok {
		r1 = rf(url, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGetter interface {
	mock.TestingT
	Cleanup(func())
}

// NewGetter creates a new instance of Getter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGetter(t mockConstructorTestingTNewGetter) *Getter {
	mock := &Getter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
