// Package accesscontrolpolicyapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package accesscontrolpolicyapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	externalRef0 "oransc.org/nonrtric/capifcore/internal/common29571"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /accessControlPolicyList/{serviceApiId})
	GetAccessControlPolicyListServiceApiId(ctx echo.Context, serviceApiId string, params GetAccessControlPolicyListServiceApiIdParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAccessControlPolicyListServiceApiId converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccessControlPolicyListServiceApiId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "serviceApiId" -------------
	var serviceApiId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "serviceApiId", runtime.ParamLocationPath, ctx.Param("serviceApiId"), &serviceApiId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter serviceApiId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAccessControlPolicyListServiceApiIdParams
	// ------------- Required query parameter "aef-id" -------------

	err = runtime.BindQueryParameter("form", true, true, "aef-id", ctx.QueryParams(), &params.AefId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter aef-id: %s", err))
	}

	// ------------- Optional query parameter "api-invoker-id" -------------

	err = runtime.BindQueryParameter("form", true, false, "api-invoker-id", ctx.QueryParams(), &params.ApiInvokerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter api-invoker-id: %s", err))
	}

	// ------------- Optional query parameter "supported-features" -------------

	err = runtime.BindQueryParameter("form", true, false, "supported-features", ctx.QueryParams(), &params.SupportedFeatures)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter supported-features: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAccessControlPolicyListServiceApiId(ctx, serviceApiId, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/accessControlPolicyList/:serviceApiId", wrapper.GetAccessControlPolicyListServiceApiId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xX23LbNhD9lR20D+0MTYp0FMd6U+U4o2mn0ViaviQZDUQuRSQkgACgFNWjD+pv9Ms6",
	"C9K6RHTSWH4xbXL37MHi4Cx8z1JVaSVROssG98ymBVbc/zpMU7R2pKQzqpyoUqSbP4R19ClDmxqhnVCS",
	"DdgdaoOWEMAVCNznQdokgvaZUArrIFcGOOh6UQpbYAYWzUqkCMPJOGQB00ZpNE6gr8+1GMuV+oTGF2/f",
	"HpduaIHKAXlaEA6IJofwhMPKJ/1sMGcD9lO0X2zUrjQaHpfZsG3A3EYjGzBuDN+w7f6FWnzE1FHESdb3",
	"uqJ3TLn0PMd7nl+tuyzVGjP6nnICm4kK77hcYnf7ZwWCExWCoRgLWW2EXMK6EGnhS4sdkgVuENoCoKT/",
	"fLAJsNj4V0/p4zHLkyYGp+uyEzRTTJXMThd1EAUaDVgf9+PUWxJCOlyiOaAxU46XB1U6+koRIOtqgYb2",
	"7aiNz8Bjp6Bxx/oP0mF8A9xasZSYPaCPhpPxLaTKIOS1TH3Sroh1JACvW4Ofa2EwY4N3xwU/dGj6Ozr7",
	"StB7yX1LcV7wR/0R++51t+r4NFjHjSNmB/qbTZPrOEnmI1VVSt5wx8MNr8pOWd5whz59GzDrlH4WqFNH",
	"oFf4xaGRvLxRaYecLt9MJjCbQnIdJkkCf8VXYRz2oCnse3BreIVrZT55n/TxfyrjioWqZUYRlgWsNiUb",
	"sMI5PYii9XodXi61DpVZRrnT0VRjaiNu0kKsMEqu5xaNQBs1RSNqgpC56tabd+cu8w7fy3//gaSXxEFD",
	"661Zcin+9jvMS5hw4yQaC78M78a/BTCcjacBjEbTYQCvZ9NxALPpjX/MhvRj9Gv4Xg7LEoxYFs4Cycqs",
	"MAvfexULV1JrvcbnzRSat2No3rjtfDgZs4Ct0NiGfhwmYe+Cl7rgYUyrVBol14L6HvbCHsmKu8JvS8S7",
	"B1t038qUvD3bUugSO8+BMwJX+L1pR1omJfsu0Rlnb9A9MlSnB5U9V5KCQ2PZ4N2JNWYonchF40qPjFNy",
	"bQqmVbOASV55Zzgus3cHZ2oM2uFPKz5xkm+T8Kf49e1D0c81ms2+Ksf8Qjx/vb1rPFZXi4s2oqn/A/Vm",
	"CnJROjQgjMESV1w60qlW0iIptuQOM3AKamlrrZWhP3PkrjZoHyG0C7w4CNyTOrCk/lX8vyxp+oB4+wC4",
	"3X6gRrdECTbp9ehBCkXpmpuVLkXjz9FHS+u9P6XRfVl65E7o/e+4g29/D+kgXvauftBud+QjyvUQr86A",
	"eEUQL5oePAmCcj1EfAZE3EBcngFx2UC8OAPiRQPx8gyIlx4iPoNF3LBIrp8OkVwTRP+MTe03m9o/Y0f6",
	"zY5kmPO6dE+Gecjfbv0h8pOw9f1m1t9zLe6Uctt2cF20s+aimTXRKqZRyI3gi3L3nxMlNKOrZeevDHYQ",
	"RfiFV7rEMFUV+/rMtonALWSYC7pwCgm2XqQlry3CVdgn+z2+yhDzD9v/AgAA//++CFh4SQ4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "TS29571_CommonData.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
