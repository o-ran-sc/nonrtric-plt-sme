// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	publishserviceapi "oransc.org/nonrtric/capifcore/internal/publishserviceapi"
)

// PublishRegister is an autogenerated mock type for the PublishRegister type
type PublishRegister struct {
	mock.Mock
}

// AreAPIsPublished provides a mock function with given fields: serviceDescriptions
func (_m *PublishRegister) AreAPIsPublished(serviceDescriptions *[]publishserviceapi.ServiceAPIDescription) bool {
	ret := _m.Called(serviceDescriptions)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*[]publishserviceapi.ServiceAPIDescription) bool); ok {
		r0 = rf(serviceDescriptions)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetAllPublishedServices provides a mock function with given fields:
func (_m *PublishRegister) GetAllPublishedServices() []publishserviceapi.ServiceAPIDescription {
	ret := _m.Called()

	var r0 []publishserviceapi.ServiceAPIDescription
	if rf, ok := ret.Get(0).(func() []publishserviceapi.ServiceAPIDescription); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]publishserviceapi.ServiceAPIDescription)
		}
	}

	return r0
}

// IsAPIPublished provides a mock function with given fields: aefId, path
func (_m *PublishRegister) IsAPIPublished(aefId string, path string) bool {
	ret := _m.Called(aefId, path)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(aefId, path)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

type mockConstructorTestingTNewPublishRegister interface {
	mock.TestingT
	Cleanup(func())
}

// NewPublishRegister creates a new instance of PublishRegister. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPublishRegister(t mockConstructorTestingTNewPublishRegister) *PublishRegister {
	mock := &PublishRegister{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
