// Package invokermanagementapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package invokermanagementapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	externalRef0 "oransc.org/nonrtric/capifcore/internal/common29122"
	externalRef1 "oransc.org/nonrtric/capifcore/internal/common29571"
	externalRef2 "oransc.org/nonrtric/capifcore/internal/publishserviceapi"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /onboardedInvokers)
	PostOnboardedInvokers(ctx echo.Context) error

	// (DELETE /onboardedInvokers/{onboardingId})
	DeleteOnboardedInvokersOnboardingId(ctx echo.Context, onboardingId string) error

	// (PATCH /onboardedInvokers/{onboardingId})
	ModifyIndApiInvokeEnrolment(ctx echo.Context, onboardingId string) error

	// (PUT /onboardedInvokers/{onboardingId})
	PutOnboardedInvokersOnboardingId(ctx echo.Context, onboardingId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostOnboardedInvokers converts echo context to params.
func (w *ServerInterfaceWrapper) PostOnboardedInvokers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostOnboardedInvokers(ctx)
	return err
}

// DeleteOnboardedInvokersOnboardingId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteOnboardedInvokersOnboardingId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "onboardingId" -------------
	var onboardingId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "onboardingId", runtime.ParamLocationPath, ctx.Param("onboardingId"), &onboardingId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter onboardingId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteOnboardedInvokersOnboardingId(ctx, onboardingId)
	return err
}

// ModifyIndApiInvokeEnrolment converts echo context to params.
func (w *ServerInterfaceWrapper) ModifyIndApiInvokeEnrolment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "onboardingId" -------------
	var onboardingId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "onboardingId", runtime.ParamLocationPath, ctx.Param("onboardingId"), &onboardingId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter onboardingId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ModifyIndApiInvokeEnrolment(ctx, onboardingId)
	return err
}

// PutOnboardedInvokersOnboardingId converts echo context to params.
func (w *ServerInterfaceWrapper) PutOnboardedInvokersOnboardingId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "onboardingId" -------------
	var onboardingId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "onboardingId", runtime.ParamLocationPath, ctx.Param("onboardingId"), &onboardingId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter onboardingId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutOnboardedInvokersOnboardingId(ctx, onboardingId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/onboardedInvokers", wrapper.PostOnboardedInvokers)
	router.DELETE(baseURL+"/onboardedInvokers/:onboardingId", wrapper.DeleteOnboardedInvokersOnboardingId)
	router.PATCH(baseURL+"/onboardedInvokers/:onboardingId", wrapper.ModifyIndApiInvokeEnrolment)
	router.PUT(baseURL+"/onboardedInvokers/:onboardingId", wrapper.PutOnboardedInvokersOnboardingId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "TS29122_CommonData.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef2.PathToRawSpec(path.Join(pathPrefix, "TS29222_CAPIF_Publish_Service_API.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(pathPrefix, "TS29571_CommonData.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
